type Token @entity {
    id:               ID!
    tokenID:          Int!
    lostWorld:        Bytes!
    minter:           User!
    createdTimestamp: Int!

    # mutables
    owner:            User!
    activeOrder:      Order
    hasActiveOrder:   Boolean!
    seller:           User
    updatedTimestamp: Int!

    transactions: [TokenTransaction!]! @derivedFrom(field: "token")
    orders:       [Order!]!            @derivedFrom(field: "token")
}

type TokenTransaction @entity {
    id:        ID!
    from:      User!
    to:        User!
    token:     Token!
    contract:  Bytes!
    timestamp: Int!
}

type Order @entity {
    id:          ID! # prefix + orderId
    orderId:     Int!
    marketplace: String!
    token:       Token!

    # variables
    price:  BigInt!
    seller: User!
    buyer:  User

    # flags
    isOpen:     Boolean!
    isExecuted: Boolean!

    # timestamps
    createdTimestamp: Int!
    updatedTimestamp: Int!
}

type Badge @entity {
    id:          ID!
    tokenID:     Int!
    achievement: Bytes!
    owner:       User!
    achievedAt:  Int!
}

type User @entity {
    id:               ID!
    owner:            [Token!]!            @derivedFrom(field: "owner")
    minter:           [Token!]!            @derivedFrom(field: "minter")
    fromTransactions: [TokenTransaction!]! @derivedFrom(field: "from")
    toTransactions:   [TokenTransaction!]! @derivedFrom(field: "to")
    sellOrders:       [Order!]!            @derivedFrom(field: "seller")
    boughtOrders:     [Order!]!            @derivedFrom(field: "buyer")
    badges:           [Badge!]!            @derivedFrom(field: "owner")
}
